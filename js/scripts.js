// Creates global variables that will count responses in the form of scores to determine which track fits the user.
var cSharpScore;
var cssScore;
var javaScore;
var phpScore;
var rubyScore;
// Creates global variables to be set to the value pulled from each survey question, plus two more to tell certain functions whether or not to finish their tasks.
var userName;
var companySize;
var webOrNot;
var website;
var userJob;
var phoneUse;
var userPreference;
var websiteAnswered;
var websiteOpen;
// Variables for each possible answer so that code is less confusing, e.g. instead of companySize === "a", it's companySize === answerA, basically trying to be descriptive inside the JavaScript.
var answerA = "a";
var answerB = "b";
var answerC = "c";
var answerD = "d";
var answerE = "e";
// A function that resets the points of all tracks when called. Intended to before trackScoring. Could be used inside trackScoring but I think it's a little more clear if I call it directly in the front-end.
var scoreReset = function() {
  rubyScore = 0;
  phpScore = 0;
  javaScore = 0;
  cssScore = 0;
  cSharpScore = 0;
}
// Assigns the variables to the values for the questions they're named after. Intended to run before trackScoring...not sure if this one should go into the front-end section becuase its pulling data from the form.
var pullAnswers = function() {
  userName = $("#user-name").val();
  if(userName === "") {
    userName = "No-name";
  } else {};
  companySize = $("input:radio[name=company-size]:checked").val();
  webOrNot = $("input:radio[name=web-or-not]:checked").val();
  website = $("input:radio[name=website]:checked").val();
  userJob = $("input:radio[name=user-job]:checked").val();
  phoneUse = $("input:radio[name=phone-use]:checked").val();
  userPreference = $("input:radio[name=preference]:checked").val();
}
// Goes through the questions and sets appropriate scores. There's a little DOM manipulation in here but little enough to be okay I think.
var trackScoring = function() {
  if(companySize === answerA) {
    rubyScore = rubyScore + 2;
    cssScore = cssScore + 2;
  } else if(companySize === answerB) {
    phpScore = phpScore + 2;
    javaScore = javaScore + 2;
    cssScore = cssScore + 2;
    cSharpScore = cSharpScore + 2;
  } else {};

  if(webOrNot === answerA) {
    websiteAnswered = false;
    websiteOpen = true;
    $("#yes-on-websites").show();
    rubyScore = rubyScore + 2;
    phpScore = phpScore + 2;
    cssScore = cssScore + 2;
  } else if(webOrNot === answerB) {
    websiteAnswered = true;
    websiteOpen = false;
    $("#yes-on-websites").hide();
    javaScore = javaScore + 2;
    cSharpScore = cSharpScore + 2;
    rubyScore = rubyScore - 2;
    phpScore = phpScore - 2;
    cssScore = cssScore - 2;
  } else {};
  // Checks if the website question is open before applying the score; it the question is closed, no score is applied, even if the user managed to open it, choose an answer, and close it again.
  if(websiteOpen && website === answerA) {
    rubyScore = rubyScore + 1;
    websiteAnswered = true;
  } else if(websiteOpen && website === answerB) {
    phpScore = phpScore + 1;
    websiteAnswered = true;
  } else if(websiteOpen && website === answerC) {
    cssScore = cssScore + 1;
    websiteAnswered = true;
  } else {
  };

  if(userJob === answerA) {
    cssScore = cssScore + 2;
    rubyScore = rubyScore + 2;
  } else if(userJob === answerB) {
    phpScore = phpScore + 2;
  } else if(userJob === answerC) {
    cSharpScore = cSharpScore + 2;
    javaScore = javaScore + 2;
  } else{};

  if(phoneUse === answerA) {
    javaScore = javaScore + 3;
  } else if(phoneUse ===answerB) {
    javaScore = javaScore + 1;
  } else if(phoneUse === answerC) {
    rubyScore = rubyScore + 2;
    phpScore = phpScore + 2;
    cssScore = cssScore + 2;
    cSharpScore = cSharpScore + 2;
  } else {};

  if(userPreference === answerA) {
    cSharpScore = cSharpScore + 1;
  } else if(userPreference ===answerB) {
    cssScore = cssScore + 1;
  } else if(userPreference === answerC) {
    javaScore = javaScore + 1;
  } else if(userPreference === answerD) {
    phpScore = phpScore + 1;
  } else if(userPreference === answerE) {
    rubyScore = rubyScore + 1;
  };
};
// Takes the scores generated by trackScoring and compares them, then tells the user which track fits them. I suppose the DOM manipulation could go into a separate function that goes under the front-end section but I would basically be doing the same conditional statements twice. Not sure if that's something that we want? i.e. the first function would spit out which track comes out on top, the second function would decide what to tell the user depending on the result of the first function -- I believe both would use the same number of conditional statements. Or is there just so much DOM maniulation that the entire thing should go into the front-end?
var trackEvaluate = function() {
  // The function first checks if the website question has been answered(if it's open on the page), before going through with the evaluation.
  if (websiteAnswered) {
    $("#please-answer").hide();
    $("#result-message").hide();
    $("#result-message").text();
    $("#result-message").removeClass("red-text");
    $(".track-result").hide();
    if(cSharpScore > cssScore && cSharpScore > javaScore && cSharpScore > phpScore && cSharpScore > rubyScore) {
      $(".track-result").show();
      $(".name-insert").text(userName);
      $(".language-result").text("you should take the C#/.NET track");
      $("#score-list").hide();
    } else if(cssScore > cSharpScore && cssScore > javaScore && cssScore > phpScore && cssScore > rubyScore) {
      $(".track-result").show();
      $(".name-insert").text(userName);
      $(".language-result").text("you should take the CSS/Design track");
      $("#score-list").hide();
    } else if(javaScore > cssScore && javaScore > cSharpScore && javaScore > phpScore && javaScore > rubyScore) {
      $(".track-result").show();
      $(".name-insert").text(userName);
      $(".language-result").text("you should take the Java/Android track");
      $("#score-list").hide();
    } else if(phpScore > cssScore && phpScore > javaScore && phpScore > cSharpScore && phpScore > rubyScore) {
      $(".track-result").show();
      $(".name-insert").text(userName);
      $(".language-result").text("you should take the PHP/Drupal track");
      $("#score-list").hide();
    } else if(rubyScore > cssScore && rubyScore > javaScore && rubyScore > phpScore && rubyScore > cSharpScore) {
      $(".track-result").show();
      $(".name-insert").text(userName);
      $(".language-result").text("you should take the Ruby/Rails track");
      $("#score-list").hide();
    } else if(cssScore === rubyScore) {
      $(".track-result").show();
      $(".name-insert").text(userName);
      $(".language-result").text("you seem to lean toward web technologies the most, you should consider taking the CSS/Design or Ruby/Rails track");
      $("#score-list").hide();
    } else {
      $(".track-result").show();
      $(".name-insert").text(userName);
      $(".language-result").text("you've scored the same in more than one track, so we've only narrowed it down a little for you. Here are your scores so you can see which tracks you lean toward.");
      $("#score-list").show();
      $("#csharp-score").text("C#/.NET: " + cSharpScore);
      $("#css-score").text("CSS/Design: " + cssScore);
      $("#java-score").text("Java/Android: " + javaScore);
      $("#php-score").text("PHP/Drupal: " + phpScore);
      $("#ruby-score").text("Ruby/Rails: " + rubyScore);
    };
  } else {
    $("#please-answer").show();
    $("#result-message").show();
    $("#result-message").text("Please fill out the highlighted question we just added.");
    $("#result-message").addClass("red-text");
    $(".track-result").hide();
  };
};

// Back-end/business logic goes above, front-end/ui goes below this line...might have turned into more of a "things to do only after the document is ready" section(anything inside $(function(){}) basically). I mean there's an event listener, but DOM manipulation takes place in the functions I created above. If I were asked to balance the sections out more I suppose I would move trackEvaluation and pullAnswers to below this line, maybe even separate trackEvaluation into two functions with one evaluating and one doing DOM manipulation, even though it would use more resources running similar conditional statements twice(I think).

$(function() {
  $("#track-survey").submit(function(event) {
    event.preventDefault();
    // These could really be combined into one function, but I think having them separated adds flexibility for any future developments.
    scoreReset();
    pullAnswers();
    trackScoring();
    trackEvaluate();
  });
});
